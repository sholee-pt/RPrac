class(x)
x <- 28
class(x)
x <- 28
class(x)
y <- "Hello World!"
class(y)
x <- 28
class(x)
y <- "Hello World!"
class(y)
z <- TRUE
class(z)
x <- 28
class(x)
y <- "Hello World!"
class(y)
z <- FALSE
class(z)
x <- 28
class(x)
str(x)
y <- "Hello World!"
class(y)
str(x)
z <- FALSE
class(z)
x <- 28
class(x)
str(x)
y <- "Hello World!"
class(y)
str(y)
z <- TRUE
class(z)
str(z)
x <- 28
class(x)
str(x)
y <- "Test Message"
class(y)
str(y)
z <- TRUE
class(z)
str(z)
y <- "Test Message"
x <- 28
class(x)
str(x)
y <- "Test Message"
class(y)
str(y)
z <- TRUE
class(z)
str(z)
x <- 28
class(x)
str(x)
x1 <- 2.8
x/x1
y <- "Test Message"
class(y)
str(y)
z <- TRUE
class(z)
str(z)
x <- 28
class(x)
str(x)
x1 <- 2.8
x/x1
x <- 28
class(x)
str(x)
x1 <- 2.8
x/x1
vector_array <- c(10,50,5,100)
vector_array
vector_array <- c(10,50,5,100)
vector_array
vector_array <- c(10,50,100)
vector_array
array_num <- c(10,50,100)
array_num
array_num <- c(1,10,49)
array_num
array_chr <- c("a", "b", "c")
array_chr
array_bool <- c(TRUE, FALSE, TRUE)
array_bool
array_num <- c(1,10,49); array_num
array_num <- c(1,10,49)
array_num
typeof(array_num)
is.integer(array_num)
is.atomic(array_num)
array_num <- c(1,10,49)
array_num
typeof(array_num)
is.integer(array_num)
is.atomic(array_num)
str(c(1,"a"))
t <- str(c(1,"a"))
as.character(t)
t <- str(c(1,"a"))
as.numeric(t)
array_bool <- c(TRUE, FALSE, TRUE); array_bool
as.numeric(array_bool)
array_bool <- c(TRUE, FALSE, TRUE); array_bool
as.numeric(array_bool)
x <- 28
class(x)
str(x)
x1 <- 2.8
x/x1
z <- TRUE
class(z)
str(z)
array_num <- c(1,10,49); array_num
seq(1:10)
rep("*", 7)
str(c(1,"a"))
array_bool <- c(TRUE, FALSE, TRUE); array_bool
as.numeric(array_bool) #SQL문처럼, 바꿔서 반환해주는 개념
array_numeric1 <- c(1, 0, 0, 1)
as.boolean(array_numeric1)
array_numeric1 <- c(1, 0, 0, 1)
as.bool(array_numeric1)
vect_logi[which(4<vect_logi<7)]
vect_logi[4<vect_logi<7]
c(vect_1, vect_2)
vect_1 <- c(1, 3, 5)
vect_2 <- c(2, 4, 6)
vect_sum <- vect_1+vect_2; vect_sum
c(vect_1, vect_2)
c(1:10)
vect_slice <- seq(1,10, by=2); vect_slice
vect_slice[3:7]
length(vect_slice)
seq(stats::rnorm(20)) #20개의 random한 value들을 생성
seq(17)
rep("*", 7) #rep은 repeat의 약자로, 반복적 요소 생성
rep(1:4, 2)
rep(1:4, each = 2)
rep(1:4, c(2, 2, 2, 2))
rep(1:4, c(2, 1, 2, 1))
rep(1:4, 2)
rep(1:4, each = 2)
rep(1:4, c(2, 2, 2, 2))
rep(1:4, c(2, 2, 2, 0))
rep(1:4, c(2, 1, 2, 1))
rep(1:4, each = 2, len = 4) #len이 더 짧으면 앞에서부터 len까지만 출력
rep(1:4, each = 2, len = 10)
rep(1:4, each = 2, times = 3)
rep(1:4)
rep(1, 40*(1-.8))
40*(1-.8)
rep(1, 40*(1-.8))
rep(1, 40*(1-.8)+1e-7)
1e-7
rep(1, 40*(1-.8)) #대부분의 platform에서는 7번 출력
rep(1, 40*(1-.8)+1e-7) #1e-7이라는 매우 작은 값을 추가해줌으로써 한번 더 반복되어 8번 출력
xx <- c(a=1, b=2, c=3); xx
yy <- c(1, 2, 3); yy
names(yy) <- c("a", "b", 1); yy
yy <- c(1, 2, 3); yy
names(yy) <- c("a", "b", "c", "d"); yy
yy <- c(1, 2, 3); yy
names(yy) <- c("a", "b", "c"); yy #이미 생성된 vector의 요소에 names() 함수를 이용하여 이름 붙이기
zz <- c(1:4)
names_zz <- c("a", "b", "c", "d")
setNames(zz, names_zz)
zz <- c(1:4); zz
names_zz <- c("a", "b", "c", "d"); names_zz
setNames(zz, names_zz)
zz <- c(1:4); zz
names_zz <- c("a", "b", "c", "d", "e"); names_zz
setNames(zz, names_zz)
matrix(data, nrow, ncol, byrow = FALSE)
matrix_a <- matrix(1:10, nrow = 5, byrow = TRUE)
matrix_a
matrix_a <- matrix(1:10, nrow = 5, byrow = FALSE)
matrix_a
matrix_b <- matrix(1:20, nrow = 5, byrow = TRUE); matrix_b
matrix_b <- matrix(1:20, nrow = 5, ncol = 2, byrow = TRUE); matrix_b
matrix_a <- matrix(1:10, nrow = 5, byrow = FALSE); matrix_a
matrix_b <- matrix(1:10, nrow = 5, byrow = TRUE); matrix_b
a <- matrix(1:10, nrow = 5, byrow = FALSE); a
b <- matrix(1:10, nrow = 5, byrow = TRUE); b
View(matrix_a)
matrix(data, nrow, ncol, byrow = FALSE)
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE)
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
View(matrix_a)
View(c)
View(matrix_b)
View(matrix_a)
View(matrix_a)
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
View(matrix_a)
View(matrix_a)
View(matrix_a)
View(matrix_a)
View(matrix_a)
dim(a)
dim(b)
dim(c)
d <- 1:6
dim(d) <- c(3, 2)
View(d)
View(d)
a <- matrix(1:10, nrow = 5, byrow = FALSE); a
dim(a) #dimension의 약자로, 해당 matrix의 차원을 출력
nrow(a)
ncol(a)
View(d)
al <- cbind(a, 1:5); al
dim(al) #dimension의 약자로, 해당 matrix의 차원을 출력
a <- matrix(1:10, nrow = 5, byrow = FALSE); a
a1 <- cbind(a, 1:5); a1
dim(a1) #dimension의 약자로, 해당 matrix의 차원을 출력
a2 <- matrix(13:24, ncol = 3, byrow = FALSE); a2
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
c1 <- cbind(a2, c); c1
a2 <- matrix(13:24, ncol = 3, byrow = FALSE); a2
dim(a) #dimension의 약자로, 해당 matrix의 차원을 출력
nrow(a) #행의 갯수 확인
ncol(a) #열의 갯수 확인
b <- matrix(1:10, nrow = 5, byrow = TRUE); b
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
a2 <- matrix(13:24, ncol = 3, byrow = FALSE); a2
dim(a) #dimension의 약자로, 해당 matrix의 차원을 출력
nrow(a) #행의 갯수 확인
ncol(a) #열의 갯수 확인
b <- matrix(1:10, nrow = 5, byrow = TRUE); b
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
c1 <- cbind(a2, c); c1
dim(c1)
c <- matrix(1:12, ncol = 3, byrow = FALSE); c
c <- rbind(c, 1:3)
c <- matrix(1:12, ncol = 3, byrow = FALSE); c
c <- rbind(c, 1:3); c
c <- matrix(1:12, ncol = 3, byrow = FALSE); c
c <- rbind(c, 1:3); c
c <- matrix(1:12, ncol = 3, byrow = FALSE); c
c <- rbind(c, 1:3); c
c2 <- rbind(c, 1:3) #rbind는 row bind의 약자로, matrix에 행을 추가함
c2 <- rbind(c, 1:3); c2 #rbind는 row bind의 약자로, matrix에 행을 추가함
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
c2 <- rbind(c, 1:3); c2 #rbind는 row bind의 약자로, matrix에 행을 추가함
View(a)
rownames(a) <- c("Row 1", "Row 2", "Row 3", "Row 4", "Row 5")
colnames(a) <- c("Col 1", "Col 2")
a
View(a)
rownames(a) <- c("Row 1", "Row 2", "Row 3", "Row 4", "Row 5")
colnames(a) <- c("Col 1", "Col 2", "")
colnames(a) <- c("Col 1", "Col 2")
a[1,2]
a[1,2]
a[1,3]
a[5,1]
View(c)
c[1:3, 2:3] #1~3행과 2~3열의 data로 이루어진 matrix
View(c)
View(c)
View(c)
c[:1]
c[,1]
c[1,]
c[,-1] #1번째 행을 제외한 모든 element select
c[-1,]
c[,-1:-2] #1번째 행을 제외한 모든 element select
c[,-2:-1] #1번째 행을 제외한 모든 element select
View(c)
c[,-1] #1번째 행을 제외한 모든 element select
a <- 4
b <- 5
a <- 4
b <- 5
c <- a+b
c
#2
pi <- 3.14
radius <- c(10, 12, 15)
area <- c(pi*radius**2); area
x <- c(6, 8, 10)
y <- c(2*x^2+5x+10); y
#3
x <- c(6, 8, 10)
y <- c(2*x^2+5*x+10); y
#4
vc.1 <- c(95, 86, 47, 55, 68); vc.1
vc.2 <- c(100:200, by = 2); vc.2
#5
vc.2 <- c(100, 200, by = 2); vc.2
vc.2 <- sep(100, 200, 2); vc.2
vc.2 <- seq(100, 200, 2); vc.2
#6
vc.3 <- rep(TRUE, 20); vc.3
#7
students <- c(10, 8, 14, 15, 9, 10, 15, 12, 9, 7, 8, 7)
month <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC")
absent <- names(students, month); absent
#7
absent <- c(10, 8, 14, 15, 9, 10, 15, 12, 9, 7, 8, 7)
names(absent) <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"); absent
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
class(gender_vector)
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
class(gender_vector)
factor_gender_vector <- factor(gender_vector)
class(factor_gender_vector)
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
class(gender_vector)
factor_gender <- factor(gender_vector) #factor변수로 변환
class(factor_gender)
color_vector <- c("blue", "red", "green", "white", "black", "yellow")
factor_color <- factor(color_vector); factor_color
color_vector <- c("blue", "red", "green", "white", "black", "yellow")
factor_color <- factor(color_vector); factor_color
class(factor_color)
day_vector <- c('evening', 'morning', 'afternoon', 'midday', 'midnight', 'evening')
factor_day <- factor(day_vector, ordered = TRUE); factor_day
day_vector <- c('evening', 'morning', 'afternoon', 'midday', 'midnight', 'evening')
factor_day <- factor(day_vector, levels = c('morning', 'midday', 'afternoon', 'evening', 'midnight'), ordered = TRUE); factor_day
day_vector <- c('evening', 'morning', 'afternoon', 'midday', 'midnight', 'evening')
factor_day <- factor(day_vector, levels = c('morning', 'midday', 'afternoon', 'evening', 'midnight'), ordered = TRUE); factor_day
summary(factor_day)
dataset <- mtcars
class(dataset)
dataset <- mtcars
class(dataset$mpg)
dataset <- mtcars #mtcars는 R에 내장된 dataset임
class(dataset)
class(dataset$mpg) #mpg: mile per gallon 변수의 class를 확인
