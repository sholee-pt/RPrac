par(mfrow=c(1,2))
plot(ts, type='l')
plot(diff(ts), type='l')
dt <- cars
length(dt)
dt <- cars
length(dt[,1])
x_vector <- seq(45, 55, by = 1); x_vector
log(x_vector)
exp(x_vector)
sqrt(x_vector)
factorial(x_vector)
speed <- cars$speed
mean(speed)
mean(speed)
median(speed)
var(speed)
sd(speed)
scale(speed)
head(scale(speed), 5)
quantile(speed)
summary(speed)
square_function <- function(n) {
n^2
}
sqare_function(4)
View(square_function)
square_function <- function(n) {
n^2
}
sqare_function(4)
square_function <- function(n) {
n^2
}
square_function(4)
square_function <- function(n) {
n^2
}
square_function(4)
rm(square_function); square_function
ls(environment())
square_function <- function(n) {
n^2
}
square_function(4)
ls(environment())
times <- function(x, y) {
x*y
}
times(2, 4)
library(tibble)
data_frame <- tibble(c1 = rnorm(50, 5, 1.5), c2 = rnorm(50, 5, 1.5), c3 = rnorm(50, 5, 1.5))
(data_frame$c1 - min(data_frame$c1))/(max(data_frame$c1) - min(data_frame$c1)) #c1열의 정규화 값
data_frame$c1_norm <- (data_frame$c1 - min(data_frame$c1))/(max(data_frame$c1) - min(data_frame$c1)); data_frame$c1_norm
head(data_frame$c1_norm, 5)
data_frame$c1_norm <- (data_frame$c1 -min(data_frame$c1))/(max(data_frame$c1)-min(data_frame$c1))
# show the first five values
head(data_frame$c1_norm, 5)
data_frame$c1_norm <- (data_frame$c1 -min(data_frame$c1))/(max(data_frame$c1)-min(data_frame$c1))
data_frame$c1_norm <- (data_frame$c1 -min(data_frame$c1))/(max(data_frame$c1)-min(data_frame$c1))
data_frame$c2_norm <- (data_frame$c2 -min(data_frame$c2))/(max(data_frame$c2)-min(data_frame$c2))
data_frame$c3_norm <- (data_frame$c3 -min(data_frame$c3))/(max(data_frame$c3)-min(data_frame$c3))
head(data_frame$c2_norm, 5)
head(data_frame$c3_norm, 5)
normalize <- function(x) {
nominator <- x - min(x)
denominator <- max(x) - min(x)
normalize <- nominator/denominator
return(normalize)
}
normalize(data_frame$c1)
normalize(data_frame$c1)
data_frame$c1_norm_function <- normalize(data_frame$c1)
data_frame$c2_norm_function <- normalize(data_frame$c2)
data_frame$c3_norm_function <- normalize(data_frame$c3)
nrow(airquality)
length(nrow(airquality))
length <- nrow(airquality)
length <- nrow(airquality)
total_row <- length*0.8; total_row
split <- 1:total_row
split[1:5]
train_df <- airquality[split, ]
head(train_df)
test_df <- airquality[-split, ]
head(test_df)
split_data <- function(df, train = TRUE) {
length <- nrow(df)
total_row <- length*0.8
split <- 1:total_row
if (train == TRUE) {
train_df <- df[split, ]
return(train_df)
} else {
test_df <- df[-split, ]
return(test_df)
}
}
train <- split_data(airquality, train = TRUE)
dim(train)
train <- split_data(airquality, train = TRUE)
dim(train)
test <- split_data(airquality, train = TRUE)
dim(test)
train <- split_data(airquality, train = TRUE)
dim(train)
test <- split_data(airquality, train = FALSE)
dim(test)
View(c2)
train <- split_data(airquality, train = TRUE)
dim(train)
train <- split_data(airquality, train = TRUE)
dim(train)
test <- split_data(airquality, train = FALSE)
dim(test)
quantity <- 25
if (quantity > 20) {
print('You sold a lot!')
} else {
print('Not enough for today')
}
quantity <- 19
if (quantity > 20) {
print('You sold a lot!')
} else {
print('Not enough for today')
}
average_missing <- apply(df_titanic[,colnames(df_titanic) %in% list_na], 2, mean, na.rm = TRUE); average_missing
mutate(df, name_variable_1 = condition, ...)
PATH <- "https://raw.githubusercontent.com/guru99-edu/R-Programming/master/test.csv"
df_titanic <- read.csv(PATH, sep = ",")
list_na <- colnames(df_titanic)[apply(df_titanic, 2, anyNA)] #df_titanic의 각 열에 대해 NA값의 여부를 판별하여 boolean으로 반환
library(dplyr)
df_titanic_drop <- df_titanic %>% na.omit() #na.omit(df_titanic)과 같음, na.omit(): data frame에서 NA값을 포함하는 행을 제거하여 반환하는 함수
dim(df_titanic_drop)
average_missing <- apply(df_titanic[,colnames(df_titanic) %in% list_na], 2, mean, na.rm = TRUE); average_missing
sum(is.na(df_titanic_replace$Age))
df_titanic_replace <- df_titanic %>% mutate(replace_mean_age = ifelse(is.na(Age), average_missing[1], Age), replace_mean_fare = ifelse(is.na(Fare), average_missing[2], Fare))
sum(is.na(df_titanic_replace$Age))
sum(is.na(df_titanic_replace$replace_mean_age))
median_missing <- apply(df_titanic[,colnames(df_titanic) %in% list_na], 2, median, na.rm = TRUE); median_missing
median_missing <- apply(df_titanic[,colnames(df_titanic) %in% list_na], 2, median, na.rm = TRUE)
df_titanic_replace <- df_titanic %>% mutate(replace_median_age = ifelse(is.na(Age), median_missing[1], Age), replace_median_fare = ifelse(is.na(Fare), median_missing[2], Fare))
tail(df_titanic_replace)
df_titanic_impute_mean <- data.frame(sapply(df_titanic, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x)))
tail(df_titanic_impute_mean)
directory <- getwd(); directory
df <- mtcars %>% select(mpg, disp, gear) %>% group_by(gear) %>% summarize(mean_mpg = mean(mpg), mean_disp = mean(disp)); df
open_folder <- function(dir) {
if (.Platform['OS.type'] == "windows") {
shell.exec(dir)
} else {
system(paste(Sys.getenv("R_BROWSER"), dir))
}
}
open_folder("C:/Users")
open_folder <- function(dir) {
if (.Platform['OS.type'] == "windows") {
shell.exec(dir)
} else {
system(paste(Sys.getenv("R_BROWSER"), dir))
}
}
open_folder("C:/Users")
open_folder("C:/Rfiles")
open_folder("C:/Rfiles")
library(dplyr)
df <- mtcars %>% select(mpg, disp, gear) %>% group_by(gear) %>% summarize(mean_mpg = mean(mpg), mean_disp = mean(disp))
write.csv(df, "C:/Rfiles/table_car.csv")
open_folder("C:/Rfiles")
install.packages("xlsx")
require(xlsx)
system("java -version")
write.xlsx(df, "C:/Rfiles/table_car.xlsx")
open_folder("C:/Rfiles")
library(haven)
write_sav(df, "C:/Rfiles/table_car.sav")
write_sas(df, "C:/Rfiles/table_car.sas7bdat")
write_dta(df, "C:/Rfiles/table_car.dta")
save(df, file = 'table_car.RData')
save(df, file = 'C:/Rfiles/table_car.RData')
install.packages("googledrive")
directory <- getwd()
directory <- getwd(); directory
install.packages("googledrive")
drive_upload("tabe_car.csv", name = "table_car")
library(googledrive)
drive_upload("tabe_car.csv", name = "table_car")
library(googledrive)
drive_upload("tabe_car.csv", path = "C:/Rfiles" name = "table_car")
library(googledrive)
drive_upload("tabe_car.csv", path = "C:/Rfiles", name = "table_car")
rlang::last_trace()
directory <- getwd()
library(dplyr)
df <- mtcars %>% select(mpg, disp, gear) %>% group_by(gear) %>% summarize(mean_mpg = mean(mpg), mean_disp = mean(disp))
write.csv(df, "C:/Rfiles/table_car.csv")
open_folder <- function(dir) {
if (.Platform['OS.type'] == "windows") {
shell.exec(dir)
} else {
system(paste(Sys.getenv("R_BROWSER"), dir))
}
}
open_folder("C:/Rfiles")
library(xlsx)
write.xlsx(df, "C:/Rfiles/table_car.xlsx")
library(haven)
write_sav(df, "C:/Rfiles/table_car.sav")
write_sas(df, "C:/Rfiles/table_car.sas7bdat")
write_dta(df, "C:/Rfiles/table_car.dta")
save(df, file = 'C:/Rfiles/table_car.RData') #RData: data frame이나 R object를 저장함
library(googledrive)
drive_upload(file, path = NULL, name = NULL)
library(googledrive)
drive_upload("tabe_car.csv", path = "C:/Rfiles", name = "table_car")
library(googledrive)
drive_upload("tabe_car.csv", path = "C:/Rfiles", name = "table_car")
library(dplyr)
df <- mtcars %>% select(mpg, disp, gear) %>% group_by(gear) %>% summarize(mean_mpg = mean(mpg), mean_disp = mean(disp))
write.csv(df, "table_car.csv")
library(googledrive)
drive_upload("tabe_car.csv", name = "table_car")
x <- drive_get("table_car")
library(googledrive)
drive_upload("tabe_car.csv", name = "table_car")
download_google <- drive_download(as_id(x), overwrite = TRUE)
google_file <- download_google$local_path; google_file
download_google <- drive_download(as_id(x), overwrite = TRUE)
google_file <- download_google$local_path
install.packages("rdrop2")
install.packages("rdrop2")
library(rdrop2)
install.packages('rdrop2')
install.packages('devtools')
devtools::install_github("karthik/rdrop2")
install.packages("installr")
library(installr)
updateR()
updater()
library(dplyr)
PATH <- "https://raw.githubusercontent.com/guru99-edu/R-Programming/master/british_household.csv"
data <- read.csv(PATH)
data1 <- filter(data, income < 500)
data2 <- mutate(data1, log_income = log(income), log_totexp = log(totexp), children_fac = factor(children, order = TRUE, labels = c("No", "Yes")))
data3 <- select(data2, -c(X, children, totexp, income))
glimpse(data3)
cor(data$log_income, data$wfood, method = "pearson")
library(dplyr)
PATH <- "https://raw.githubusercontent.com/guru99-edu/R-Programming/master/british_household.csv"
data <- read.csv(PATH)
data1 <- filter(data, income < 500)
data2 <- mutate(data1, log_income = log(income), log_totexp = log(totexp), children_fac = factor(children, order = TRUE, labels = c("No", "Yes")))
data3 <- select(data2, -c(X, children, totexp, income))
glimpse(data3)
cor(data$log_income, data$wfood, method = "pearson")
library(dplyr)
PATH <- "https://raw.githubusercontent.com/guru99-edu/R-Programming/master/british_household.csv"
data <- read.csv(PATH)
data1 <- filter(data, income < 500)
data2 <- mutate(data1, log_income = log(income), log_totexp = log(totexp), children_fac = factor(children, order = TRUE, labels = c("No", "Yes")))
data3 <- select(data2, -c(x, children, totexp, income))
library(dplyr)
PATH <- "https://raw.githubusercontent.com/guru99-edu/R-Programming/master/british_household.csv"
data <- read.csv(PATH)
data1 <- filter(data, income < 500)
data2 <- mutate(data1, log_income = log(income), log_totexp = log(totexp), children_fac = factor(children, order = TRUE, labels = c("No", "Yes")))
data3 <- select(data2, -c(X, children, totexp, income))
glimpse(data3)
cor(data$log_income, data$wfood, method = "pearson")
library(dplyr)
PATH <- "https://raw.githubusercontent.com/guru99-edu/R-Programming/master/british_household.csv"
data <- read.csv(PATH)
data1 <- filter(data, income < 500)
data2 <- mutate(data1, log_income = log(income), log_totexp = log(totexp), children_fac = factor(children, order = TRUE, labels = c("No", "Yes")))
data3 <- select(data2, -c(X, children, totexp, income))
glimpse(data3)
cor(data3$log_income, data$wfood, method = "pearson")
library(dplyr)
PATH <- "https://raw.githubusercontent.com/guru99-edu/R-Programming/master/british_household.csv"
data <- read.csv(PATH)
data1 <- filter(data, income < 500)
data2 <- mutate(data1, log_income = log(income), log_totexp = log(totexp), children_fac = factor(children, order = TRUE, labels = c("No", "Yes")))
data3 <- select(data2, -c(X, children, totexp, income))
glimpse(data3)
cor(data3$log_income, data3$wfood, method = "pearson")
cor(data3$log_income, data3$wfood, method = "spearman")
mat_1 <- as.dist(round(cor(data3[,1:9]), 2)); mat_1
install.packages("Hmisc")
View(mat_2)
library(Hmisc)
data_rcorr <- as.matrix(data3[, 1:9])
mat_2 <- rcorr(data_rcorr)
View(mat_2)
mat_2[["n"]]
library(Hmisc)
data_rcorr <- as.matrix(data3[, 1:9]) #p-value: 검정하고 있는 가설의 진위여부를 판단한다는데에 사용되는 척도
mat_2 <- rcorr(data_rcorr)
p_value <- round(mat_2[["P"]], 3); p_value
install.packages("GGally")
ggcorr(data3)
library(GGally)
ggcorr(df, method = c("pairwise", "pearson"), nbreaks = NULL, digits = 2, low = "#3B9AB2", mid = "#EEEEEE", high = "#F21A00", geom = "tile", label = FALSE, label_alpha = FALSE)
#df: 사용되는 data set
#method: 상관관계 계산 공식으로 default는 pairwise와 pearson
#nbreaks: 계수의 색상을 위한 범주형 범위 return, default는 'no break'이고 색 그래디언트는 연속형
#digits: 상관계수를 반올림, default는 2자리
#low: 색상의 가장 낮은 수준
#mid: 색상의 중간 수준
#high: 색상의 가장 높은 수준
#geom: 기하학적 인수의 모양 제어로 default는 'tile'
#label: boolean 값, label의 표시 여부로 default는 FALSE
ggcorr(data3)
ggcorr(data3, nbreaks = 6, low = "steelblue", mid = "white", high = "darkred", geom = "circle")
ggcorr(data3)
ggcorr(data3, nbreaks = 6, low = "steelblue", mid = "white", high = "darkred", geom = "circle")
ggcorr(data3, nbreaks = 6, label = TRUE, label_size = 3, color = "grey50")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggpairs(data3, columns = c("log_totexp", "log_income", "age", "wtrans"), title = "Bivariate analysis of revenue expenditure by the British household", upper = list(continuous = wrap("cor", size = 3)), lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)), mapping = aes(color = children_fac))
library(ggplot2)
ggpairs(data3, columns = c("log_totexp", "log_income", "age", "wtrans"), title = "Bivariate analysis of revenue expenditure by the British household", upper = list(continuous = wrap("cor", size = 3)), lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)), mapping = aes(color = children_fac))
library(ggplot2)
ggpair(data3, columns = c("log_totexp", "log_income", "age", "wtrans"), title = "Bivariate analysis of revenue expenditure by the British household", upper = list(continuous = wrap("cor", size = 3)), lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)), mapping = aes(color = children_fac))
library(ggplot2)
ggpairs(data3, columns = c("log_totexp", "log_income", "age", "wtrans"), title = "Bivariate analysis of revenue expenditure by the British household", upper = list(continuous = wrap("cor", size = 3)), lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)), mapping = aes(color = children_fac))
library(GGally)
ggpairs(data3, columns = c("log_totexp", "log_income", "age", "wtrans"), title = "Bivariate analysis of revenue expenditure by the British household", upper = list(continuous = wrap("cor", size = 3)), lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)), mapping = aes(color = children_fac))
ggpairs(data3, columns = c("log_totexp", "log_income", "age", "wtrans"), title = "Bivariate analysis of revenue expenditure by the British household", upper = list(continuous = wrap("cor", size = 3), mapping = aes(color = children_fac)), lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)))
ggpairs(data3, columns = c("log_totexp", "log_income", "age", "wtrans"), title = "Bivariate analysis of revenue expenditure by the British household", upper = list(continuous = wrap("cor", size = 3), mapping = aes(color = children_fac)), lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)))
ggpairs(data3, columns = c("log_totexp", "log_income", "age", "wtrans"), title = "Bivariate analysis of revenue expenditure by the British household", upper = list(continuous = wrap("cor", size = 3), mapping = aes(color = children_fac)), lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)))
ggpairs(data3, columns = c("log_totexp", "log_income", "age", "wtrans"), title = "Bivariate analysis of revenue expenditure by the British household", upper = list(continuous = wrap("cor", size = 3), mapping = aes(color = children_fac)), lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)))
View(batting)
library(dplyr)
data <- read.csv("https://raw.githubusercontent.com/guru99-edu/R-Programming/master/lahman-batting.csv") %>%
select(c(playerID, yearID, AB, teamID, lgID, G, R, HR, SH)) %>%
arrange(playerID, teamID, yearID) #정렬 순서 지정
glimpse(data)
summarise(data, mean_run = mean(R))
summarise(data, mean_games = mean(G), mean_SH = mean(SH, na.rm = TRUE))
summarise(data, mean_games = mean(G), mean_SH = mean(SH, na.rm = FALSE))
data %>% group_by(lgID) %>% summarise(mean_run = mean(HR)) %>%
ggplot(aes(x = lgID, y = mean_home_run, fill = lgID)) + geom_bar(stat = "identity") + theme_classic() +
labs(x = "baseball league", y = "Average home run", title = paste("Example group_by() with summarise()"))
data %>% group_by(lgID) %>% summarise(mean_home_run = mean(HR)) %>%
ggplot(aes(x = lgID, y = mean_home_run, fill = lgID)) + geom_bar(stat = "identity") + theme_classic() +
labs(x = "baseball league", y = "Average home run", title = paste("Example group_by() with summarise()"))
ex1 <- data %>% group_by(yearID) %>% summarise(mean_game_year = mean(G))
head(ex1)
ex1 <- data %>% group_by(yearID) %>% summarise(mean_game_year = mean(G)) %>%
ggplot(ex1, aes(x = yearID, y = mean_game_year)) + geom_line() + theme_classic() +
labs(x = "Year", y = "Average games played", title = paste("Average games played from 1871 to 2016"))
rlang::last_trace()
ex1 <- data %>% group_by(yearID) %>% summarise(mean_game_year = mean(G)) %>%
ggplot(ex1, aes(x = yearID, y = mean_game_year)) + geom_line() + theme_classic() +
labs(x = "Year", y = "Average games played", title = paste("Average games played from 1871 to 2016"))
ex1 <- data %>% group_by(yearID) %>% summarise(mean_game_year = mean(G))
ggplot(ex1, aes(x = yearID, y = mean_game_year)) + geom_line() + theme_classic() +
labs(x = "Year", y = "Average games played", title = paste("Average games played from 1871 to 2016"))
data %>% group_by(lgID) %>%
summarise(median_at_bat_league = median(AB), median_at_bat_league_no_zero = median(AB[AB >0]))
data %>% group_by(lgID) %>% summarise(sum_homerun_league = sum(HR))
data %>% group_by(teamID) %>% summarise(sd_at_bat_league = sd(HR))
data %>% group_by(playerID) %>% summarise(min_G = min(G), max_G = max(G))
data %>% group_by(playerID) %>% summarise(number_year = n()) %>% arrange(desc(number_year)) #count
data %>% group_by(playerID) %>% summarise(first_appearance = first(yearID), last_appearance = last(yearID))
data %>% group_by(playerID) %>% summarise(first_appearance = min(yearID), last_appearance = max(yearID))
data %>% group_by(teamID) %>% summarise(second_game = nth(yearID, 2)) %>% arrange(second_game)
data %>% group_by(teamID) %>% summarise(number_player = n_distinct(playerID)) %>% arrange(desc(number_player))
data %>% group_by(teamID, yearID) %>% summarise(number_player = n_distinct(playerID)) %>% arrange(teamID, yearID)
data %>% group_by(teamID, yearID) %>% summarise(number_player = n_distinct(playerID)) %>% arrange(teamID, yearID)
data %>% filter(yearID > 1980) %>% group_by(yearID) %>% summarise(mean_game_year = mean(G))
data %>% filter(HR > 0) %>% group_by(playerID) %>% summarise(average_HR_game = sum(HR)/sum(G)) %>%
ungroup() %>% summarise(total_average_homerun = mean(average_HR_game))
data %>% filter(HR > 0) %>% group_by(playerID) %>% summarise(average_HR_game = sum(HR)/sum(G))
data %>% filter(HR > 0) %>% group_by(playerID) %>% summarise(average_HR_game = sum(HR)/sum(G)) %>%
ungroup() %>% summarise(total_average_homerun = mean(average_HR_game))
data %>% filter(HR > 0) %>% group_by(playerID) %>% summarise(average_HR_game = sum(HR)/sum(G)) %>%
ungroup() %>% summarise(total_average_homerun = mean(average_HR_game))
library(dplyr)
PATH <- "https://raw.githubusercontent.com/guru99-edu/R-Programming/master/travel_times.csv"
df <- read.csv(PATH)
glimpse(df)
sum(df$Comments == "")
select(df, A, B, C)
step_1_df <- select(df, -Comments)
dim(df)
step_1_df <- select(df, -Comment)
step_1_df <- select(df, -Comments)
dim(step_1_df)
dim(df); dim(step_1_df)
table(step_1_df$GoingTo)
select_home <- filter(df, GoingTo == "Home")
dim(select_home)
select_work <- filter(df, GoingTo == "GSK")
dim(select_work)
select_home_wed <- filter(df, GoingTo == "Home" & DayOfWeek == "Wednesday")
dim(select_home_wed)
#pipeline 연산자
step_1 <- read.csv(PATH)
step_2 <- select(step_1, GoingTo, DayOfWeek)
step_3 <- filter(step_2, GoingTo == "Home", DayOfWeek == "Wednesday")
head(step_3)
#pipeline 연산자 o
filter_home_wed <- read.csv(PATH) %>% select(GoingTo, DayOfWeek) %>% filter(GoingTo == "Home", DayOfWeek == "Wednesday")
identical(step_3, filter_home_wed)
step_2_df <- step_1_df %>% arrange(GoingTo, Distance)
head(step_2_df)
step_2_df <- step_1_df %>% arrange(GoingTo, Distance)
select_home_wed <- filter(df, GoingTo == "Home" & DayOfWeek == "Wednesday") #복수 선택
source("C:/Users/shole/Desktop/자료/4학년/R/RPrac/Tutorial 21.R")
library(ggplot2)
ggplot(mtcars, aes(x = drat, y = mpg)) + geom_point()
ggplot(mtcars, aes(x = mpg, y = drat)) +geom_point(aes(color = factor(gear)))
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) + geom_point(aes(color = factor(gear)))
my_graph <- ggplot(mtcars, aes(x = log(mpg), y = log(drat))) + geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm", col = "#C42126", se = FALSE, size = 1); my_graph
my_graph <- ggplot(mtcars, aes(x = log(mpg), y = log(drat))) + geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm", col = "#C42126", se = TRUE, size = 1)
my_graph <- ggplot(mtcars, aes(x = log(mpg), y = log(drat))) + geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm", col = "#C42126", se = FALSE, size = 1)
my_graph + labs(title = "Plot Mile per hours and drat, in log")
A <- 2010
paste("The first year is", A)
("The first year is",A)
paste("The first year is",A)
A <- 2010
paste("The first year is", A)
B <- 2018
paste("The first year is", A, "and the last year is", B)
mean_mpg <- mean(mtcars$mpg)
my_graph + labs(title = "Plot Mile per hours and drat, in log. Average mpg is", mean_mpg)
mean_mpg <- mean(mtcars$mpg)
mean_mpg <- mean(mtcars$mpg)
my_graph + labs(title = "Plot Mile per hours and drat, in log. Average mpg is", mean_mpg)
mean_mpg <- mean(mtcars$mpg)
my_graph + labs(title = paste("Plot Mile per hours and drat, in log. Average mpg is", mean_mpg))
my_graph + labs(title = "Relation beteween Mile per hours and drat", subtitle = "Relationship break down by gear class", caption = "Authors own computation")
my_graph + labs(x = "Drat definition", y = "Mile per hours", color = "Gear",
title = "Relation between mile per hours and drat", subtitle = "Relationship break down by gear class", caption = "Authors own computation")
seq(0, 12, 4)
seq(0, 12, by = 4)
my_graph + scale_x_continuous(breaks = seq(1, 3.6, by = 0.2)) + scale_y_continuous(breaks = seq(1, 1.6, by = 0.1)) +
labs(x = "Drat definition", y = "Mile per hours", color = "Gear",
title = "Relation between mile per hours and drat", subtitle = "Relationship break down by gear class", caption = "Authors own computation")
modified_graph <- my_graph + scale_x_continuous(breaks = seq(1, 3.6, by = 0.2)) + scale_y_continuous(breaks = seq(1, 1.6, by = 0.1)) + #scale_x,y_continuous()로 각 축의 눈금을 수동으로 설정 가능
labs(x = "Drat definition", y = "Mile per hours", color = "Gear",
title = "Relation between mile per hours and drat", subtitle = "Relationship break down by gear class", caption = "Authors own computation")
modified_graph + theme_dark()
directory <- getwd(); directory
ggsave("my_first_plot.png")
View(open_folder)
ggsave("my_first_plot.png", width = 6, height = 4)
open_folder(directory)
library(dplyr)
library(ggplot2)
data_air <- airquality %>%
select(-c(Solar.R, Temp)) %>%
mutate(Month = factor(Month, order = TRUE, labels = c("May", "June", "July", "August", "September")),
day_cat = factor(ifelse(Day < 10, "Begin", ifelse(Day < 20, "Middle", "End"))))
data_air_no_na <- data_air %>% na.omit() #data set의 결측치(NA) 제거
box_plot <- ggplot(data_air_no_na, aes(x = Month, y = Ozone))
box_plot + geom_boxplot() #box plot 작성
box_plot + geom_boxplot(outlier.colour = "red", outlier.shape = 2, outlier.size = 3) + theme_classic()
ggplot(data_air_no_na, aes(x = Month, y = Ozone, color = Month)) + geom_boxplot() + theme_classic()
ggplot(data_air_no_na, aes(Month, Ozone)) + geom_boxplot(aes(fill = day_cat)) + theme_classic()
box_plot + geom_boxplot() + geom_jitter(shape = 15, color = "steelblue", position = position_jitter(width = 0.21)) + theme_classic()
box_plot + geom_boxplot()
box_plot + geom_boxplot() + theme_classic()
box_plot + geom_boxplot() + geom_point(shape = 5, color = "steelblue") + theme_classic()
box_plot + geom_boxplot(notch = TRUE) + theme_classic()
mtacars
mtacars
mtcars
View(mtcars)
ggplot(mtcars, aes(x = factor(cy1))) + geom_bar()
library(ggplot2)
ggplot(mtcars, aes(x = factor(cy1))) + geom_bar()
ggplot(mtcars, aes(x = factor(cy1))) + geom_bar()
ggplot(mtcars, aes(x = factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x = cyl)) + geom_bar()
ggplot(mtcars, aes(x = factor(cyl)) + geom_bar()
ggplot(mtcars, aes(x = factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x = factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x = factor(cyl))) + geom_bar(fill = "coral") + theme_classic()
grDevices::colors()
ggplot(mtcars, aes(factor(cyl))) + geom_bar(fill = "coral", alpha = 0.5) + theme_classic()
ggplot(mtcars, aes(factor(cyl), fill = factor(cyl))) + geom_bar()
ggplot(data, aes(x = cyl, fill = am)) + geom_bar() + theme_classic()
library(dplyr)
data <- mtcars %>% mutate(am = factor(am, labels = c("auto", "man")), cyl = factor(cyl))
ggplot(data, aes(x = cyl, fill = am)) + geom_bar() + theme_classic()
ggplot(data, aes(x = cyl, fill = am)) + geom_bar(position = "fill") + theme_classic()
ggplot(data, aes(x = cyl, fill = am)) + geom_bar(position = position_dodge()) + theme_classic()
data_histogram <- mtcars %>% mutate(cyl = factor(cyl)) %>% group_by(cyl) %>% summarize(mean_mpg = round(mean(mpg), 2))
ggplot(data_histogram, aes(x = cyl, y = mean_mpg)) + geom_bar(stat = "identity")
ggplot(data_histogram, aes(x = cyl, y = mean_mpg)) + geom_bar(stat = "identity") + coord_flip()
ggplot(data_histogram, aes(x = cyl, y = mean_mpg, fill = cyl)) + geom_bar(stat = "identity") + coord_flip() + theme_classic()
ggplot(data_histogram, aes(x = cyl, y = mean_mpg, fill = cyl)) + geom_bar(stat = "identity", width = 0.5) + coord_flip() + theme_classic()
bar_graph <- ggplot(data_histogram, aes(x = cyl, y = mean_mpg, fill = cyl)) + geom_bar(stat = "identity", width = 0.5) + coord_flip() + theme_classic()
bar_graph + geom_text(aes(label = mean_mpg), hjust = 1.5, color = "white", size = 3)
set.seed(123)
sugar_cookie <- rnorm(30, mean = 9.99, sd = 0.04)
head(sugar_cookie)
t.test(sugar_cookie, mu = 10)
#쌍대 t-검정정
set.seed(123)
sales_before <- rnorm(7, mean = 50000, sd = 50)
sales_after <- rnorm(7, mean = 50075, sd = 50)
t.test(sales_before, sales_after, var.equal = TRUE)
