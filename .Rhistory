as.boolean(array_numeric1)
array_numeric1 <- c(1, 0, 0, 1)
as.bool(array_numeric1)
vect_logi[which(4<vect_logi<7)]
vect_logi[4<vect_logi<7]
c(vect_1, vect_2)
vect_1 <- c(1, 3, 5)
vect_2 <- c(2, 4, 6)
vect_sum <- vect_1+vect_2; vect_sum
c(vect_1, vect_2)
c(1:10)
vect_slice <- seq(1,10, by=2); vect_slice
vect_slice[3:7]
length(vect_slice)
seq(stats::rnorm(20)) #20개의 random한 value들을 생성
seq(17)
rep("*", 7) #rep은 repeat의 약자로, 반복적 요소 생성
rep(1:4, 2)
rep(1:4, each = 2)
rep(1:4, c(2, 2, 2, 2))
rep(1:4, c(2, 1, 2, 1))
rep(1:4, 2)
rep(1:4, each = 2)
rep(1:4, c(2, 2, 2, 2))
rep(1:4, c(2, 2, 2, 0))
rep(1:4, c(2, 1, 2, 1))
rep(1:4, each = 2, len = 4) #len이 더 짧으면 앞에서부터 len까지만 출력
rep(1:4, each = 2, len = 10)
rep(1:4, each = 2, times = 3)
rep(1:4)
rep(1, 40*(1-.8))
40*(1-.8)
rep(1, 40*(1-.8))
rep(1, 40*(1-.8)+1e-7)
1e-7
rep(1, 40*(1-.8)) #대부분의 platform에서는 7번 출력
rep(1, 40*(1-.8)+1e-7) #1e-7이라는 매우 작은 값을 추가해줌으로써 한번 더 반복되어 8번 출력
xx <- c(a=1, b=2, c=3); xx
yy <- c(1, 2, 3); yy
names(yy) <- c("a", "b", 1); yy
yy <- c(1, 2, 3); yy
names(yy) <- c("a", "b", "c", "d"); yy
yy <- c(1, 2, 3); yy
names(yy) <- c("a", "b", "c"); yy #이미 생성된 vector의 요소에 names() 함수를 이용하여 이름 붙이기
zz <- c(1:4)
names_zz <- c("a", "b", "c", "d")
setNames(zz, names_zz)
zz <- c(1:4); zz
names_zz <- c("a", "b", "c", "d"); names_zz
setNames(zz, names_zz)
zz <- c(1:4); zz
names_zz <- c("a", "b", "c", "d", "e"); names_zz
setNames(zz, names_zz)
matrix(data, nrow, ncol, byrow = FALSE)
matrix_a <- matrix(1:10, nrow = 5, byrow = TRUE)
matrix_a
matrix_a <- matrix(1:10, nrow = 5, byrow = FALSE)
matrix_a
matrix_b <- matrix(1:20, nrow = 5, byrow = TRUE); matrix_b
matrix_b <- matrix(1:20, nrow = 5, ncol = 2, byrow = TRUE); matrix_b
matrix_a <- matrix(1:10, nrow = 5, byrow = FALSE); matrix_a
matrix_b <- matrix(1:10, nrow = 5, byrow = TRUE); matrix_b
a <- matrix(1:10, nrow = 5, byrow = FALSE); a
b <- matrix(1:10, nrow = 5, byrow = TRUE); b
View(matrix_a)
matrix(data, nrow, ncol, byrow = FALSE)
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE)
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
View(matrix_a)
View(c)
View(matrix_b)
View(matrix_a)
View(matrix_a)
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
View(matrix_a)
View(matrix_a)
View(matrix_a)
View(matrix_a)
View(matrix_a)
dim(a)
dim(b)
dim(c)
d <- 1:6
dim(d) <- c(3, 2)
View(d)
View(d)
a <- matrix(1:10, nrow = 5, byrow = FALSE); a
dim(a) #dimension의 약자로, 해당 matrix의 차원을 출력
nrow(a)
ncol(a)
View(d)
al <- cbind(a, 1:5); al
dim(al) #dimension의 약자로, 해당 matrix의 차원을 출력
a <- matrix(1:10, nrow = 5, byrow = FALSE); a
a1 <- cbind(a, 1:5); a1
dim(a1) #dimension의 약자로, 해당 matrix의 차원을 출력
a2 <- matrix(13:24, ncol = 3, byrow = FALSE); a2
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
c1 <- cbind(a2, c); c1
a2 <- matrix(13:24, ncol = 3, byrow = FALSE); a2
dim(a) #dimension의 약자로, 해당 matrix의 차원을 출력
nrow(a) #행의 갯수 확인
ncol(a) #열의 갯수 확인
b <- matrix(1:10, nrow = 5, byrow = TRUE); b
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
a2 <- matrix(13:24, ncol = 3, byrow = FALSE); a2
dim(a) #dimension의 약자로, 해당 matrix의 차원을 출력
nrow(a) #행의 갯수 확인
ncol(a) #열의 갯수 확인
b <- matrix(1:10, nrow = 5, byrow = TRUE); b
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
c1 <- cbind(a2, c); c1
dim(c1)
c <- matrix(1:12, ncol = 3, byrow = FALSE); c
c <- rbind(c, 1:3)
c <- matrix(1:12, ncol = 3, byrow = FALSE); c
c <- rbind(c, 1:3); c
c <- matrix(1:12, ncol = 3, byrow = FALSE); c
c <- rbind(c, 1:3); c
c <- matrix(1:12, ncol = 3, byrow = FALSE); c
c <- rbind(c, 1:3); c
c2 <- rbind(c, 1:3) #rbind는 row bind의 약자로, matrix에 행을 추가함
c2 <- rbind(c, 1:3); c2 #rbind는 row bind의 약자로, matrix에 행을 추가함
c <- matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE); c
c2 <- rbind(c, 1:3); c2 #rbind는 row bind의 약자로, matrix에 행을 추가함
View(a)
rownames(a) <- c("Row 1", "Row 2", "Row 3", "Row 4", "Row 5")
colnames(a) <- c("Col 1", "Col 2")
a
View(a)
rownames(a) <- c("Row 1", "Row 2", "Row 3", "Row 4", "Row 5")
colnames(a) <- c("Col 1", "Col 2", "")
colnames(a) <- c("Col 1", "Col 2")
a[1,2]
a[1,2]
a[1,3]
a[5,1]
View(c)
c[1:3, 2:3] #1~3행과 2~3열의 data로 이루어진 matrix
View(c)
View(c)
View(c)
c[:1]
c[,1]
c[1,]
c[,-1] #1번째 행을 제외한 모든 element select
c[-1,]
c[,-1:-2] #1번째 행을 제외한 모든 element select
c[,-2:-1] #1번째 행을 제외한 모든 element select
View(c)
c[,-1] #1번째 행을 제외한 모든 element select
a <- 4
b <- 5
a <- 4
b <- 5
c <- a+b
c
#2
pi <- 3.14
radius <- c(10, 12, 15)
area <- c(pi*radius**2); area
x <- c(6, 8, 10)
y <- c(2*x^2+5x+10); y
#3
x <- c(6, 8, 10)
y <- c(2*x^2+5*x+10); y
#4
vc.1 <- c(95, 86, 47, 55, 68); vc.1
vc.2 <- c(100:200, by = 2); vc.2
#5
vc.2 <- c(100, 200, by = 2); vc.2
vc.2 <- sep(100, 200, 2); vc.2
vc.2 <- seq(100, 200, 2); vc.2
#6
vc.3 <- rep(TRUE, 20); vc.3
#7
students <- c(10, 8, 14, 15, 9, 10, 15, 12, 9, 7, 8, 7)
month <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC")
absent <- names(students, month); absent
#7
absent <- c(10, 8, 14, 15, 9, 10, 15, 12, 9, 7, 8, 7)
names(absent) <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"); absent
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
class(gender_vector)
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
class(gender_vector)
factor_gender_vector <- factor(gender_vector)
class(factor_gender_vector)
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
class(gender_vector)
factor_gender <- factor(gender_vector) #factor변수로 변환
class(factor_gender)
color_vector <- c("blue", "red", "green", "white", "black", "yellow")
factor_color <- factor(color_vector); factor_color
color_vector <- c("blue", "red", "green", "white", "black", "yellow")
factor_color <- factor(color_vector); factor_color
class(factor_color)
day_vector <- c('evening', 'morning', 'afternoon', 'midday', 'midnight', 'evening')
factor_day <- factor(day_vector, ordered = TRUE); factor_day
day_vector <- c('evening', 'morning', 'afternoon', 'midday', 'midnight', 'evening')
factor_day <- factor(day_vector, levels = c('morning', 'midday', 'afternoon', 'evening', 'midnight'), ordered = TRUE); factor_day
day_vector <- c('evening', 'morning', 'afternoon', 'midday', 'midnight', 'evening')
factor_day <- factor(day_vector, levels = c('morning', 'midday', 'afternoon', 'evening', 'midnight'), ordered = TRUE); factor_day
summary(factor_day)
dataset <- mtcars
class(dataset)
dataset <- mtcars
class(dataset$mpg)
dataset <- mtcars #mtcars는 R에 내장된 dataset임
class(dataset)
class(dataset$mpg) #mpg: mile per gallon 변수의 class를 확인
View(a1)
df <- data.frame(a,b,c,d); df
df <- data.frame(a,b,c,d); df
View(dataset)
df <- data.frame(a,b,c,d); df
df <- data.frame(a,b,c,d); df
df <- data.frame(name = c("John", "Anna", "Peter", "Linda"), age = c(25, 30, 35, 28), gender = c("M", "F", "M", "F")); df
df <- data.frame(c("John", "Anna", "Peter", "Linda"), c(25, 30, 35, 28), c("M", "F", "M", "F")); df
df <- data.frame(c("John", "Anna", "Peter", "Linda"), c(25, 30, 35, 28), c("M", "F", "M", "F"))
#names() 함수를 이용하여 column의 이름을 변경할 수 있음
names(df) <- c('name', 'age', 'gender'); df
names(df) <- c('name', 'age', 'gender'); df
str(df)
df <- data.frame(c("John", "Anna", "Peter", "Linda", "Paul"), c(25, 30, 35, 28, 25), c("M", "F", "M", "F", "M"))
#names() 함수를 이용하여 column의 이름을 변경할 수 있음
names(df) <- c('name', 'age', 'gender'); df
str(df) #기본적으로 data frame은 문자열 변수를 factor로 변환함
df <- data.frame(c("John", "Anna", "Peter", "Linda"), c(25, 30, 35, 28), c("M", "F", "M", "F"), c("P", "P", "F", "P"))
#names() 함수를 이용하여 column의 이름을 변경할 수 있음
names(df) <- c('name', 'age', 'gender', 'test'); df
str(df) #기본적으로 data frame은 문자열 변수를 factor로 변환함
df[1,2] #2열에 있는 1행 선택
df[1:2]
df[1:2,]
df[,1] #1열 선택택
df[2:3, 3:4] #1~3행까지, 3~4열까지 선택
df[2:3, 2:3] #1~3행까지, 3~4열까지 선택
df[c('John', 'Peter'),]
df[, c('age', 'test')]
df[, c("age", "test", "gender")]
quantity <- c(10, 35, 40, 5)
df$quantity <- quantity #'$'기호를 이용하여 새로운 var 추가 가능
df
quantity <- c(10, 35, 40, 5)
df$quantity <- quantity; df #'$'기호를 이용하여 새로운 var(column) 추가 가능
quantity <- c(10, 35, 40)
df$quantity <- quantity; df #'$'기호를 이용하여 새로운 var(column) 추가 가능
quantity <- c(10, 35, 40, 5)
df$quantity <- quantity; df #'$'기호를 이용하여 새로운 var(column) 추가 가능
c1 <- cbind(a2, c); c1 #c matrix의 column방향으로 결합되기 때문에 dimension이 변경됨
dim(c1)
c2 <- rbind(c, 1:3); c2 #rbind는 row bind의 약자로, matrix에 행을 추가함
dim(c2)
df$gender
subset(df, subset = age > 30) #age가 30보다 큰 항목들만 출력
subset(df, subset = age >= 30) #age가 30보다 큰 항목들만 출력
subset(df, subset = age < 30) #age가 30보다 큰 항목들만 출력
mat <- matrix(1:9, ncol = 7); mat
mat <- matrix(1:9, ncol = 5); mat
mat <- matrix(1:10, ncol = 5)
dim(mat)
mat <- matrix(1:10, ncol = 5); dim(mat) #2x5 matrix 생성
df1 <- EuStockMarkets[1:10,]
df1 <- EuStockMarkets[1:10,]; df1
df1 <- EuStockMarkets[10,]; df1 #EuStockMarkets라는 built-in data set에서
my_list <- list(vect, mat, df1); my_list
vect <- 1:5 #1~5의 vector 생성
mat <- matrix(1:10, ncol = 5); dim(mat) #2x5 matrix 생성
df1 <- EuStockMarkets[1:10,]; df1 #EuStockMarkets라는 built-in data set에서 1~10까지의 열을 선택
my_list <- list(vect, mat, df1); my_list
mylist[2]
my_list[2]
my_list[[2]]
PATH <- 'https://raw.githubusercontent.com/guru99-edu/R-Programming/master/prison.csv' #online에서 이용 가능한 R data set
prison <- read.csv(PATH)[1:5]
head(prison, 5) #data frame의 상단을 표시
str(prison)
sort_sample <- c(3, 1, 5, NA, 2, 4)
sorted_sample <- sort(sort_sample, decreasing = FALSE, na.last = TRUE); sorted_sample
sort_sample <- c(3, 1, 5, NA, 2, 4)
sorted_sample <- sort(sort_sample, decreasing = FALSE); sorted_sample
sort_sample <- c(3, 1, 5, NA, 2, 4)
sorted_sample <- sort(sort_sample, decreasing = FALSE, na.last = FALSE); sorted_sample
print("안녕하세요요")
sort_sample <- c(3, 1, 5, NA, 2, 4)
sorted_sample <- sort(sort_sample, decreasing = FALSE); sorted_sample
sort_sample <- c(3, 1, 5, NA, 2, 4)
sorted_sample <- sort(sort_sample, decreasing = FALSE, na.last = FALSE); sorted_sample
library(backports)
detach("package:backports", unload = TRUE)
library(backports)
detach("package:backports", unload = TRUE)
library(brew)
detach("package:brew", unload = TRUE)
df_primary <- tribble(~ID, ~y, "A", 5, "B", 5, "C", 8, "D", 0, "F", 9); df_primary
library(dplyr)
df_primary <- tribble(~ID, ~y, "A", 5, "B", 5, "C", 8, "D", 0, "F", 9); df_primary
df_secondary <- tribble(~ID, ~y, "A", 30, "B", 21, "C", 22, "D", 25, "E", 29)
left_join(df_primary, df_secondary, by = 'ID')
library(dplyr)
df_primary <- tribble(~ID, ~y, "A", 5, "B", 5, "C", 8, "D", 0, "F", 9); df_primary
df_secondary <- tribble(~ID, ~y, "A", 30, "B", 21, "C", 22, "D", 25, "E", 29)
left_join(df_primary, df_secondary, by = 'ID')
library(dplyr)
df_primary <- tribble(~ID, ~y, "A", 5, "B", 5, "C", 8, "D", 0, "F", 9);
df_secondary <- tribble(~ID, ~y, "A", 30, "B", 21, "C", 22, "D", 25, "E", 29)
left_join(df_primary, df_secondary, by = 'ID')
library(dplyr)
df_primary <- tribble(~ID, ~y, "A", 5, "B", 5, "C", 8, "D", 0, "F", 9);
df_secondary <- tribble(~ID, ~z, "A", 30, "B", 21, "C", 22, "D", 25, "E", 29)
left_join(df_primary, df_secondary, by = 'ID')
str(df_primary)
right_join(df_primary, df_secondary, by = 'ID')
View(df_primary)
inner_join(df_primary, df_secondary, by = 'ID')
full_join(df_primary, df_secondary, by = 'ID')
df_primary <- tribble(~ID, ~year, ~items, "A", 2015,3,  "A", 2016,7, "A", 2017,6, "B", 2015,4, "B", 2016,8, "B", 2017,7, "C", 2015,4, "C", 2016,6, "C", 2017,6)
df_secondary <- tribble(~ID, ~year, ~prices, "A", 2015,9, "A", 2016,8, "A", 2017,12, "B", 2015,13, "B", 2016,14, "B", 2017,6, "C", 2015,15, "C", 2016,15, "C", 2017,13)
left_join(df_primary, df_secondary, by = c('ID', 'year'))
View(df_secondary)
library(dplyr) #data 변환을 돕는 library
df_primary <- tribble(~ID, ~y, "A", 5, "B", 5, "C", 8, "D", 0, "F", 9);
df_secondary <- tribble(~ID, ~z, "A", 30, "B", 21, "C", 22, "D", 25, "E", 29)
#NA: Not Available의 약자로, missing value를 의미함
left_join(df_primary, df_secondary, by = 'ID') #left table을 기준으로 merge
right_join(df_primary, df_secondary, by = 'ID') #right table을 기준으로 merge
inner_join(df_primary, df_secondary, by = 'ID') #수학적으로는 교집합과 유사함
full_join(df_primary, df_secondary, by = 'ID') #수학적으로는 합집합과 유사함
df_primary1 <- tribble(~ID, ~year, ~items, "A", 2015,3,  "A", 2016,7, "A", 2017,6, "B", 2015,4, "B", 2016,8, "B", 2017,7, "C", 2015,4, "C", 2016,6, "C", 2017,6)
df_secondary1 <- tribble(~ID, ~year, ~prices, "A", 2015,9, "A", 2016,8, "A", 2017,12, "B", 2015,13, "B", 2016,14, "B", 2017,6, "C", 2015,15, "C", 2016,15, "C", 2017,13)
left_join(df_primary1, df_secondary1, by = c('ID', 'year'))
install tidyr; install.packages("tidyr")
df_primary1 <- tribble(~ID, ~year, ~items, "A", 2015,3,  "A", 2016,7, "A", 2017,6, "B", 2015,4, "B", 2016,8, "B", 2017,7, "C", 2015,4, "C", 2016,6, "C", 2017,6)
library(dplyr) #data 변환을 돕는 library
df_primary <- tribble(~ID, ~y, "A", 5, "B", 5, "C", 8, "D", 0, "F", 9);
df_secondary <- tribble(~ID, ~z, "A", 30, "B", 21, "C", 22, "D", 25, "E", 29)
#NA: Not Available의 약자로, missing value를 의미함
left_join(df_primary, df_secondary, by = 'ID') #left table을 기준으로 merge
right_join(df_primary, df_secondary, by = 'ID') #right table을 기준으로 merge
inner_join(df_primary, df_secondary, by = 'ID') #수학적으로는 교집합과 유사함
full_join(df_primary, df_secondary, by = 'ID') #수학적으로는 합집합과 유사함
df_primary1 <- tribble(~ID, ~year, ~items, "A", 2015,3,  "A", 2016,7, "A", 2017,6, "B", 2015,4, "B", 2016,8, "B", 2017,7, "C", 2015,4, "C", 2016,6, "C", 2017,6)
df_secondary1 <- tribble(~ID, ~year, ~prices, "A", 2015,9, "A", 2016,8, "A", 2017,12, "B", 2015,13, "B", 2016,14, "B", 2017,6, "C", 2015,15, "C", 2016,15, "C", 2017,13)
left_join(df_primary1, df_secondary1, by = c('ID', 'year'))
messy <- data.frame(country = country = c("A", "B", "C"), q1 = c(0.03, 0.05, 0.01), q2 = c(0.05, 0.07, 0.02), q3 = c(0.04, 0.05, 0.01), q4 = c(0.03, 0.02, 0.04)); messy
library(tidyr)
library(tidyr)
install.packages("tidyr")
library(tidyr)
messy <- data.frame(country = c("A", "B", "C"), q1 = c(0.03, 0.05, 0.01), q2 = c(0.05, 0.07, 0.02), q3 = c(0.04, 0.05, 0.01), q4 = c(0.03, 0.02, 0.04)); messy
library(tidyr)
messy <- data.frame(country = c("A", "B", "C"), q1 = c(0.03, 0.05, 0.01), q2 = c(0.05, 0.07, 0.02), q3 = c(0.04, 0.05, 0.01), q4 = c(0.03, 0.02, 0.04)); messy
tidier <- messy %>%
tidier <- messy %>% gather(quarter, growth, q1:q4); tidier
tidier <-messy %>% gather(quarter, growth, q1:q4); tidier
View(tidier)
View(messy)
View(tidier)
messy_1 <-tidier %>% spread(quarter, growth); messy_1
separate_tidier <-tidier%>% separate(quarter, c("Qrt", "year"), sep = "_"); separate_tidier
library(tidyr)
messy <- data.frame(country = c("A", "B", "C"), q1_2017 = c(0.03, 0.05, 0.01), q2_2017 = c(0.05, 0.07, 0.02), q3_2017 = c(0.04, 0.05, 0.01), q4_2017 = c(0.03, 0.02, 0.04))
tidier <-messy %>% gather(quarter, growth, q1:q4) #%>%: 파이프 연산자로써 객체를 다른 함수에 전달하는 것
library(tidyr)
messy <- data.frame(country = c("A", "B", "C"), q1_2017 = c(0.03, 0.05, 0.01), q2_2017 = c(0.05, 0.07, 0.02), q3_2017 = c(0.04, 0.05, 0.01), q4_2017 = c(0.03, 0.02, 0.04))
tidier <-messy %>% gather(quarter, growth, q1_2017:q4_2017) #%>%: 파이프 연산자로써 객체를 다른 함수에 전달하는 것
messy_1 <-tidier %>% spread(quarter, growth)
separate_tidier <-tidier%>% separate(quarter, c("Qrt", "year"), sep = "_"); separate_tidier
unite_tidier <-separate_tidier %>% unite(Quarter, c("Qrt", "year"), sep = "_"); unite_tidier
unite_tidier <- separate_tidier %>% unite(Quarter, c("Qrt", "year"), sep = "_")
unite_tidier <- separate_tidier %>% unite(Quarter, c("Qrt", "year"), sep = "_"); unite_tidier
producers <- data.frame(surname = c("Spielberg", "Scorsese", "Hitchcock", "Tarantino", "Polanski"), nationality = c("US", "US", "UK", "US", "Poland"), stringsAsFactors = FALSE)
movies <- data.frame(surname = c("Spielberg", "Scorsese", "Hitchcock", "Hitchcock", "Spielberg", "Tarantino", "Polanski"), title = c("Super 8", "Taxi Driver", "Psycho", "North by Northwest", "Catch Me If You Can", "Reservoir Dogs", "Chinatown"), stringsAsFactors = FALSE)
m1 <- merge(producers, movies, by.x = "surname"); m1
dim(m1)
producers <- data.frame(surname = c("Spielberg", "Scorsese", "Hitchcock", "Tarantino", "Polanski"), nationality = c("US", "US", "UK", "US", "Poland"), stringsAsFactors = FALSE)
movies <- data.frame(surname = c("Spielberg", "Scorsese", "Hitchcock", "Hitchcock", "Spielberg", "Tarantino", "Polanski"), title = c("Super 8", "Taxi Driver", "Psycho", "North by Northwest", "Catch Me If You Can", "Reservoir Dogs", "Chinatown"), stringsAsFactors = FALSE)
m1 <- merge(producers, movies, by.x = "surname"); m1
dim(m1)
View(producers)
View(movies)
View(m1)
m1 <- merge(producers, movies, "surname"); m1
producers <- data.frame(surname = c("Spielberg", "Scorsese", "Hitchcock", "Tarantino", "Polanski"), nationality = c("US", "US", "UK", "US", "Poland"), stringsAsFactors = FALSE)
movies <- data.frame(surname = c("Spielberg", "Scorsese", "Hitchcock", "Hitchcock", "Spielberg", "Tarantino", "Polanski"), title = c("Super 8", "Taxi Driver", "Psycho", "North by Northwest", "Catch Me If You Can", "Reservoir Dogs", "Chinatown"), stringsAsFactors = FALSE)
m1 <- merge(producers, movies, by.x = "surname")
colnames(movies)[colnames(movies) == 'surname'] <- 'name'
m2 <- merge(producers, movies, by.x = "surname", by.y = "name"); m2
View(m2)
View(m1)
colnames(movies)[colnames(movies) == 'surname'] <- 'name'
m2 <- merge(producers, movies, by.x = "surname", by.y = "name"); m2
identical(m1, m2)
add_producer <- c('Lucas', 'US')
producers <- rbind(producers, add_producer)
m3 <- merge(producers, movies, by.x = "surname", by.y = "name", all.x = TRUE); m3
View(m1)
View(m2)
View(m3)
set.seed(123)
x = rnorm(1000)
ts <- cumsum(x)
diff_ts <- diff(ts)
par(mfrow=c(1,2))
plot(ts, type='l')
plot(diff(ts), type='l')
dt <- cars
length(dt)
dt <- cars
length(dt[,1])
x_vector <- seq(45, 55, by = 1); x_vector
log(x_vector)
exp(x_vector)
sqrt(x_vector)
factorial(x_vector)
speed <- cars$speed
mean(speed)
mean(speed)
median(speed)
var(speed)
sd(speed)
scale(speed)
head(scale(speed), 5)
quantile(speed)
summary(speed)
square_function <- function(n) {
n^2
}
sqare_function(4)
View(square_function)
square_function <- function(n) {
n^2
}
sqare_function(4)
square_function <- function(n) {
n^2
}
square_function(4)
square_function <- function(n) {
n^2
}
square_function(4)
rm(square_function); square_function
ls(environment())
square_function <- function(n) {
n^2
}
square_function(4)
ls(environment())
times <- function(x, y) {
x*y
}
times(2, 4)
library(tibble)
data_frame <- tibble(c1 = rnorm(50, 5, 1.5), c2 = rnorm(50, 5, 1.5), c3 = rnorm(50, 5, 1.5))
(data_frame$c1 - min(data_frame$c1))/(max(data_frame$c1) - min(data_frame$c1)) #c1열의 정규화 값
data_frame$c1_norm <- (data_frame$c1 - min(data_frame$c1))/(max(data_frame$c1) - min(data_frame$c1)); data_frame$c1_norm
head(data_frame$c1_norm, 5)
data_frame$c1_norm <- (data_frame$c1 -min(data_frame$c1))/(max(data_frame$c1)-min(data_frame$c1))
# show the first five values
head(data_frame$c1_norm, 5)
data_frame$c1_norm <- (data_frame$c1 -min(data_frame$c1))/(max(data_frame$c1)-min(data_frame$c1))
data_frame$c1_norm <- (data_frame$c1 -min(data_frame$c1))/(max(data_frame$c1)-min(data_frame$c1))
data_frame$c2_norm <- (data_frame$c2 -min(data_frame$c2))/(max(data_frame$c2)-min(data_frame$c2))
data_frame$c3_norm <- (data_frame$c3 -min(data_frame$c3))/(max(data_frame$c3)-min(data_frame$c3))
head(data_frame$c2_norm, 5)
head(data_frame$c3_norm, 5)
normalize <- function(x) {
nominator <- x - min(x)
denominator <- max(x) - min(x)
normalize <- nominator/denominator
return(normalize)
}
normalize(data_frame$c1)
normalize(data_frame$c1)
data_frame$c1_norm_function <- normalize(data_frame$c1)
data_frame$c2_norm_function <- normalize(data_frame$c2)
data_frame$c3_norm_function <- normalize(data_frame$c3)
nrow(airquality)
length(nrow(airquality))
length <- nrow(airquality)
length <- nrow(airquality)
total_row <- length*0.8; total_row
split <- 1:total_row
split[1:5]
train_df <- airquality[split, ]
head(train_df)
test_df <- airquality[-split, ]
head(test_df)
split_data <- function(df, train = TRUE) {
length <- nrow(df)
total_row <- length*0.8
split <- 1:total_row
if (train == TRUE) {
train_df <- df[split, ]
return(train_df)
} else {
test_df <- df[-split, ]
return(test_df)
}
}
train <- split_data(airquality, train = TRUE)
dim(train)
train <- split_data(airquality, train = TRUE)
dim(train)
test <- split_data(airquality, train = TRUE)
dim(test)
train <- split_data(airquality, train = TRUE)
dim(train)
test <- split_data(airquality, train = FALSE)
dim(test)
